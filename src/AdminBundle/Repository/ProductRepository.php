<?php

namespace AdminBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function findProduct()
    {
        $results = $this
            ->createQueryBuilder('product')
            ->select('product.description, product.price, brand.title') // le product se réfère à l'alias de du createQueryBuilder, On peut mettre tous les champs, séparé par une virgule
/*            ->setMaxResults(6) // Nbre de résultat max
            ->setFirstResult(2) // A partir d'où on commence*/
            ->join('product.marque', 'brand')
            ->where('product.description = :desc')
            ->andWhere('product.price > :price')
            ->andWhere('brand.title LIKE :brand')
            ->orderBy('product.price', 'DESC')
            ->setParameters([
                'desc' => 'lorem ipsum',
                'price' => 8,
                'brand' => '%titre%'
            ])
            ->getQuery()
            ->getResult()
            ;
        return $results;
    }

    public function findProduct2()
    {
        $results = $this
            ->createQueryBuilder('product')
            ->select('COUNT(product.id) result')
            ->join('product.marque', 'brand')
            ->groupBy('brand.title')
            ->getQuery()
            ->getScalarResult()
        ;

        return $results;
    }


    public function myFindAll()
    {
        // Creation d'une requête DQL
        // findAll() maison
        $query = $this->getEntityManager()
            ->createQuery('
            SELECT prod
            FROM AdminBundle:Product prod
            ');
        $query->getResult();


        // Création d'une requête grâce au builder
        // findAll() maison
        /*$query = $this->getEntityManager()->createQueryBuilder()
            ->select("prod")
            ->from("AdminBundle:Product", "prod")
            ->getQuery();

        die(dump($query->getResult()));*/

    }

    public function myfindMyId($id) {

        // Creation d'une requête DQL
        // find() maison
        $query = $this->getEntityManager()
            ->createQuery('
                    	  SELECT prod
                          FROM AdminBundle:Product AS prod
                          WHERE prod.id = :identifiant
                    ')
        /* Intégrer un ou plusieurs paramètres */
                    ->setParameters([
                         'identifiant' => $id,
                     /*'autre_variable' => $autre*/
                    ]);

        $query->getResult();

        //die(dump($query->getResult()));

        // Création d'une requête grâce au builder
        // findAll() maison
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select("prod")
            ->from("AdminBundle:Product", "prod")
            ->getQuery();

        //die(dump($query->getResult()));

        return $query->getResult();
    }

    public function myFindQuantityInf5()
    {
        // Creation d'une requête DQL
        // findAll() maison
        $query = $this->getEntityManager()
            ->createQuery('
            SELECT prod
            FROM AdminBundle:Product prod
            WHERE prod.quantity > 5
            ');
        $query->getResult();
    }

    public function myFindCountQuantity0()
    {
        // Creation d'une requête DQL
        // findAll() maison
        $query = $this->getEntityManager()
            ->createQuery('
            SELECT COUNT(prod)
            FROM AdminBundle:Product prod
            WHERE prod.quantity = 0
            ');
        $query->getResult();
    }

    public function findLastSixProducts()
    {
        $query = $this
            ->createQueryBuilder('product') // select * from product
            ->orderBy('product.price', 'DESC')
            ->setMaxResults(6)
            ->getQuery()
            ->getResult()
        ;

        //die(dump($query->getResult()));
        return $query;
    }

    public function findTreeSliders()
    {
        $query = $this
            ->createQueryBuilder('product') // select * from product
            ->orderBy('product.quantity', 'DESC')
            ->setMaxResults(3)
            ->getQuery()
        ;

        return $query->getResult();
    }

    public function findAllProductFromCategory($idCat, $offset)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->where('c.id = :idcat')
            ->setFirstResult($offset)
            ->setMaxResults(4)
            ->setParameters([
                'idcat' => $idCat
            ])
            ->getQuery()
            ->getResult()
        ;
        return $query;
    }

    public function countProductByCategory($id)
    {
        $results = $this
            ->createQueryBuilder('product')
            ->select('COUNT(product.id) result')
            ->join('product.categories', 'c')
            ->where('c.id = :id')
            ->setParameters([
                'id' => $id
            ])
            ->getQuery()
            ->getSingleScalarResult()
        ;
        return $results;
    }
}
